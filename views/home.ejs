<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Home - Bus Terminal</title>
  <link rel="stylesheet" href="/css/style.css">
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome CDN -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Simple Snackbar styling */
    #snackbar {
      visibility: hidden;
      min-width: 250px;
      background-color: #333;
      color: #fff;
      text-align: center;
      border-radius: 2px;
      padding: 16px;
      position: fixed;
      z-index: 9999;
      left: 50%;
      bottom: 30px;
      transform: translateX(-50%);
    }
    #snackbar.show {
      visibility: visible;
      animation: fadein 0.5s, fadeout 0.5s 2.5s;
    }
    @keyframes fadein {
      from { bottom: 0; opacity: 0; }
      to { bottom: 30px; opacity: 1; }
    }
    @keyframes fadeout {
      from { bottom: 30px; opacity: 1; }
      to { bottom: 0; opacity: 0; }
    }
  </style>
</head>
<body>
  <!-- Include Sidebar Partial -->
  <%- include('partials/sidebar', { active: 'home', user: user }) %>

  <!-- Main Content -->
  <div class="content">
    <div class="container mt-4">
      <h1>Welcome, <%= user.username %>!</h1>
      <p>This is the Bus Terminal Dashboard.</p>
      <p>Waiting for incoming vehicle data...</p>
    </div>
  </div>

  <!-- Snackbar for notifications -->
  <div id="snackbar"></div>

  <!-- Forced Terminal Update Modal (only for non-admin users without a linked terminal) -->
  <% if (user.role === 'user' && (!user.terminal || user.terminal === "")) { %>
  <div class="modal fade" id="terminalModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="terminalModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="terminalModalLabel">Complete Terminal Information</h5>
          <!-- No close button to force submission -->
        </div>
        <div class="modal-body">
          <form id="terminalForm">
            <div class="mb-3">
              <label for="modalProvinsi" class="form-label">Provinsi</label>
              <select class="form-select" id="modalProvinsi" name="provinsi" required>
                <option value="">Select Provinsi</option>
                <% provinsiList.forEach(function(prov) { %>
                  <option value="<%= prov.id %>"><%= prov.name %></option>
                <% }); %>
              </select>
            </div>
            <div class="mb-3">
              <label for="modalKabupaten" class="form-label">Kabupaten</label>
              <select class="form-select" id="modalKabupaten" name="kabupaten" required disabled>
                <option value="">Select Kabupaten</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="modalTerminal" class="form-label">Terminal</label>
              <select class="form-select" id="modalTerminal" name="terminal" required disabled>
                <option value="">Select Terminal</option>
              </select>
            </div>
            <button type="submit" class="btn btn-success">Submit</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Bootstrap Bundle JS (includes Popper) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <% if (user.role === 'user') { %>
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Show forced terminal modal if user has no terminal.
      var terminalModalEl = document.getElementById('terminalModal');
      if (terminalModalEl) {
        var terminalModal = new bootstrap.Modal(terminalModalEl);
        terminalModal.show();
      }
    });
    
    // Dependent dropdowns for forced terminal update modal.
    document.getElementById('modalProvinsi').addEventListener('change', function() {
      var provinsiId = this.value;
      var kabupatenSelect = document.getElementById('modalKabupaten');
      var terminalSelect = document.getElementById('modalTerminal');
      kabupatenSelect.innerHTML = '<option value="">Select Kabupaten</option>';
      terminalSelect.innerHTML = '<option value="">Select Terminal</option>';
      terminalSelect.disabled = true;
      if (provinsiId) {
        kabupatenSelect.disabled = false;
        fetch('/get-kabupaten?provinsi_id=' + provinsiId)
          .then(response => response.json())
          .then(data => {
            if(data.length === 0) console.log("No kabupaten found for provinsiId:", provinsiId);
            data.forEach(function(item) {
              var option = document.createElement('option');
              option.value = item.id;
              option.text = item.name;
              kabupatenSelect.appendChild(option);
            });
          })
          .catch(error => console.error('Error fetching kabupaten:', error));
      } else {
        kabupatenSelect.disabled = true;
      }
    });
    
    document.getElementById('modalKabupaten').addEventListener('change', function() {
      var kabupatenId = this.value;
      var terminalSelect = document.getElementById('modalTerminal');
      terminalSelect.innerHTML = '<option value="">Select Terminal</option>';
      if (kabupatenId) {
        terminalSelect.disabled = false;
        fetch('/get-terminal?kabupaten_id=' + kabupatenId)
          .then(response => response.json())
          .then(data => {
            if(data.length === 0) console.log("No terminal found for kabupatenId:", kabupatenId);
            data.forEach(function(item) {
              var option = document.createElement('option');
              option.value = item.id;
              option.text = item.nama_terminal;
              terminalSelect.appendChild(option);
            });
          })
          .catch(error => console.error('Error fetching terminal:', error));
      } else {
        terminalSelect.disabled = true;
      }
    });
    
    // Forced terminal update form submission.
    document.getElementById('terminalForm').addEventListener('submit', function(e) {
      e.preventDefault();
      var formData = new FormData(this);
      fetch('/user/update-terminal', {
        method: 'POST',
        body: new URLSearchParams(formData)
      })
      .then(response => response.text())
      .then(result => {
        if(result === 'OK') {
          var modalInstance = bootstrap.Modal.getInstance(document.getElementById('terminalModal'));
          modalInstance.hide();
          location.reload();
        } else {
          alert('Error: ' + result);
        }
      })
      .catch(error => console.error('Error updating terminal:', error));
    });
    
    // WebSocket connection and message handling for non-admin users.
    const wsProtocol = (location.protocol === "https:" ? "wss://" : "ws://");
    const ws = new WebSocket(wsProtocol + location.host + "/ws");
    let messageQueue = [];
    
    ws.onopen = () => { console.log("WebSocket connection established"); };
    
    ws.onmessage = (event) => {
      // Ignore incoming messages if forced terminal modal is open.
      var terminalModalEl = document.getElementById('terminalModal');
      if (terminalModalEl && terminalModalEl.classList.contains('show')) {
        console.log("Forced terminal modal is open; ignoring incoming WebSocket message.");
        return;
      }
      console.log("Incoming message:", event.data);
      try {
        const data = JSON.parse(event.data);
        if(data.action === "record") {
          const msgText = data.is_departure ? "New Departure Record" : "New Arrival Record";
          enqueueSnackbar(msgText);
        } else if(data.action === "new_bus") {
          console.log("New bus workflow is disabled. Ignoring new_bus message.");
        }
      } catch (e) {
        console.error("Error parsing WebSocket message:", e);
      }
    };
    
    ws.onerror = (error) => { console.error("WebSocket error:", error); };
    ws.onclose = () => { console.log("WebSocket connection closed"); };
    
    function enqueueSnackbar(msg) {
      messageQueue.push(msg);
      processSnackbarQueue();
    }
    
    function processSnackbarQueue() {
      if (messageQueue.length === 0) return;
      const msg = messageQueue.shift();
      showSnackbar(msg);
      setTimeout(processSnackbarQueue, 3000);
    }
    
    function showSnackbar(message) {
      const sb = document.getElementById("snackbar");
      sb.textContent = message;
      sb.className = "show";
      setTimeout(() => { sb.className = sb.className.replace("show", ""); }, 3000);
    }
  </script>
  <% } %>
</body>
</html>
